@model Friseur.Models.Client

<form id="ClientEditForm">
	@Html.AntiForgeryToken()

	@{
		HtmlHelper.UnobtrusiveJavaScriptEnabled = false;
	}
	<div class="form-horizontal">
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		@Html.HiddenFor(model => model.ClientId)
		@Html.HiddenFor(model => model.Created_By)
		@Html.HiddenFor(model => model.CreationDate)
		<div class="form-group">
			@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @name = "fuckyou" } })
				@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Client_Address, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Client_Address, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Client_Address, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.ClientTypeId, "Client Type", htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("ClientTypeId", null, "Please Select", htmlAttributes: new { @class = "form-control" })
				@Html.ValidationMessageFor(model => model.ClientTypeId, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="modal-footer">
			<input type="button" value="Save" class="btn btn-default" id="submitedtclient" />
			<input type="reset" value="Cancel" class="btn btn-default" data-dismiss="modal" />
		</div>


	</div>
</form>








<script>
	$('#ClientEditForm').validate({
		errorClass: 'help-block animation-slideDown',
		errorElement: 'div',
		errorPlacement: function (error, e) {
			e.parents('.form-group > div').append(error);
		},
		highlight: function (e) {
			$(e).closest('.form-group').removeClass('has-success has-error').addClass('has-error');
			$(e).closest('.help-block').remove();
		},
		success: function (e) {
			e.closest('.form-group').removeClass('has-success has-error');
			e.closest('.help-block').remove();
		},
		rules: {
			'Name': {
				required: true,
				maxlength: 20,
			},
			'Client_Address': {
				required: true,
				maxlength: 40,
			},
			'ClientTypeId': {
				required: true,
			}
		},
		messages: {
			'Name': {
				required: 'Please enter client name',
				maxlength: 'Not more than 20 characters allowed',
			},
			'Client_Address': {
				required: 'Please enter client address',
				maxlength: 'Not more than 40 characters allowed',
			},
			'ClientTypeId': {
				required: 'Please select client type',
			}
		}

	});





	$("#submitedtclient").on("click", function () {
		if ($("#ClientEditForm").valid()) {
			var data = $("#ClientEditForm").serialize();
		$.ajax({
			type: "POST",
		    url:  '@Url.Action("Update", "Clients")',
			data: data,
			success: function (response) {
				toastr.options.onHidden = function () {
					window.location.reload();
				}
				toastr.options.positionClass = "toast-bottom-full-width";
				toastr.options.progressBar = true;
				toastr.options.timeout = 0;
				toastr.options.extendedTimeOut = 0;
				toastr.options.fadeOut = 500;
				toastr.options.tapToDismiss = false;
				toastr.success("Client data updated successfully");
				$("#EditClientModal").modal("hide");
				$("#ClientEditForm")[0].reset();
			},
			error: function (response) {
				toastr.options.positionClass = "toast-bottom-full-width";
				toastr.options.progressBar = true;
				toastr.options.timeout = 0;
				toastr.options.extendedTimeOut = 0;
				toastr.options.fadeOut = 500;
				toastr.options.tapToDismiss = false;
				toastr.error("Oops, There has been a problem, the system adminstrators have been notified.");
				$("#EditClientModal").modal("hide");
				$("#ClientEditForm")[0].reset();
			}
		})
		}
	})














</script>





